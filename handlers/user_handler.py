from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
import logging

from keyboards.inline_keyboards import phone_kb, keyboard_user
from utils import Registration
from database import add_user
from google_sheets import get_all_data

user_router = Router()
logger = logging.getLogger(__name__)

@user_router.message(Registration.waiting_for_full_name)
async def get_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –§–ò–û: {message.text.strip()}")
    
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=phone_kb)
    await state.set_state(Registration.waiting_for_phone)


@user_router.message(Registration.waiting_for_phone)
async def get_phone(message: Message, state: FSMContext):
    if message.contact is not None:
        phone = message.contact.phone_number
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {phone}")
    else:
        phone = message.text.strip()
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é: {phone}")

    await state.update_data(phone=phone)
    data = await state.get_data()

    flag = await add_user(
        int(data["user_id"]),
        data["user_name"],
        data["full_name"],
        data["phone"]
    )
    if flag[0] == True:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=keyboard_user)
    else:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û—à–∏–±–∫–∞: {flag[1]}")
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", reply_markup=keyboard_user)
    await state.clear()

@user_router.callback_query(F.data == "get_schedule")
async def get_schedule(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
    data = get_all_data(0)
    response = "\n".join(
        f"üéØ **{row['–ù–∞–∑–≤–∞–Ω–∏–µ']}**\n"
        f"üìÖ {row['–î–∞—Ç–∞']}\n"
        f"üïí {row['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞']} - {row['–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è']}\n"
        f"üìç {row['–ú–µ—Å—Ç–æ']}\n"
        f"üìå {row['–û–ø–∏—Å–∞–Ω–∏–µ']}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        for row in data
    )

    await callback.message.answer(response, reply_markup=keyboard_user)

@user_router.callback_query(F.data == "get_raffle")
async def get_raffle(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ")
    data = get_all_data(1)
    response = "\n".join(
        f"üèÜ **{row['–ù–∞–∑–≤–∞–Ω–∏–µ']}**\n"
        f"üìÖ {row['–î–∞—Ç–∞']}\n"
        f"‚è∞ {row['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞']} ‚Äì {row['–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è']}\n"
        f"üí∞ –ü—Ä–∏–∑—ã: {row['–ü—Ä–∏–∑—ã']}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        for row in data
    )

    await callback.message.answer(response, reply_markup=keyboard_user)