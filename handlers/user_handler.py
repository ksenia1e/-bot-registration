from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
import logging

from keyboards.inline_keyboards import phone_kb, keyboard_user, get_kb_show_event
from utils import Registration
from database import add_user, get_all_table, add_user_event, add_user_role

user_router = Router()
logger = logging.getLogger(__name__)

@user_router.message(Registration.waiting_for_full_name)
async def get_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text.strip())

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –§–ò–û: {message.text.strip()}")
    
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=phone_kb)
    await state.set_state(Registration.waiting_for_phone)


@user_router.message(Registration.waiting_for_phone)
async def get_phone(message: Message, state: FSMContext):
    if message.contact is None:
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤–≤—ë–ª –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é")
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=phone_kb)
        await state.set_state(Registration.waiting_for_phone)
        return
    
    phone = message.contact.phone_number
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É: {phone}")

    if not phone:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä")
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        return
    
    logger.info(f"–ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω: {phone}")
    await state.update_data(phone=phone)

    data = await state.get_data()
    try:
        await add_user(
            int(data["user_id"]),
            data["user_name"],
            data["full_name"],
            data["phone"]
        )
        await add_user_role(
            int(data["user_id"]),
            "user"
        )

        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", reply_markup=ReplyKeyboardRemove())
        await message.answer("–ú–µ–Ω—é", reply_markup=keyboard_user)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.answer("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–Ω–æ–≤–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É '/start'")

    await state.clear()

@user_router.callback_query(F.data == "get_schedule")
async def get_schedule(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
    data = await get_all_table("schedule")

    if not data:
        logger.info("–¢–∞–±–ª–∏—Ü–∞ schedule –ø—É—Å—Ç–∞")
        await callback.message.answer("–°–µ–π—á–∞—Å –Ω–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –Ω–∏–∫–∞–∫–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π")
        await callback.answer()
        return
    
    await callback.answer()
    await show_current_event(callback, data, 0)

async def show_current_event(callback: CallbackQuery, events: list, position: int):
    logger.info(f"–í—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä—Ç–∏—è—Ç–∏—è —Å –ø–æ–∑–∏—Ü–∏–µ–π: {position}")

    row = events[position]
    response = (
        f"üéØ **{row[1]}**\n"
        f"üìÖ {row[2]}\n"
        f"üïí {row[3]} - {row[4]}\n"
        f"üìç {row[5]}\n"
        f"üìå {row[6]}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ "
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {position+1}/{len(events)}"
    )
    keyboard = await get_kb_show_event(position, len(events)-1)
    await callback.message.answer(response, reply_markup=keyboard)
    await callback.answer()

@user_router.callback_query(F.data.startswith("next_event"))
async def get_next_event(callback: CallbackQuery):
    position = int(callback.data.split("_")[-1]) + 1
    logger.info(f"–í—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {position}")

    data = await get_all_table("schedule")
    await callback.answer()
    await show_current_event(callback, data, position)

@user_router.callback_query(F.data.startswith("prev_event"))
async def get_next_event(callback: CallbackQuery):
    position = int(callback.data.split("_")[-1]) - 1
    logger.info(f"–í—ã–≤–æ–¥ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {position}")

    data = await get_all_table("schedule")
    await callback.answer()
    await show_current_event(callback, data, position)

@user_router.callback_query(F.data.startswith("sign_up"))
async def sign_up_event(callback: CallbackQuery):
    user_id = callback.from_user.id
    event_id = int(callback.data.split("_")[-1]) + 1

    result = await add_user_event(user_id, event_id)
    if result[0]:
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}")
        await callback.message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ!")
    else:
        logger.warning(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ {event_id}: {result[1]}")
        await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ")

    await callback.answer()
    
@user_router.callback_query(F.data == "get_raffle")
async def get_raffle(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ")
    data = await get_all_table("raffle")
    response = "\n".join(
        f"üèÜ **{row[1]}**\n"
        f"üìÖ {row[2]}\n"
        f"‚è∞ {row[3]} ‚Äì {row[4]}\n"
        f"üí∞ –ü—Ä–∏–∑—ã: {row[5]}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        for row in data
    )

    await callback.message.answer(response, reply_markup=keyboard_user)
    await callback.answer()