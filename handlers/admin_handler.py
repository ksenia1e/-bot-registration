import qrcode
import asyncio
from io import BytesIO
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.types.input_file import BufferedInputFile
import logging

from utils import AddOrganizer, get_random_user
from google_sheets import get_all_data
from bot import bot, bot_username
from keyboards.inline_keyboards import keyboard_admin, keyboard_qr, get_kb_show_organozers
from database import get_user_role, get_users, add_organizer_, get_number_of_users_, get_organizers, delete_organizer_, get_users_id_name, get_schedule, get_raffle, add_raffle, add_schedule, clear_table

admin_router = Router()
logger = logging.getLogger(__name__)

@admin_router.message(F.text == "/admin")
async def admin_panel(message: Message):
    if await get_user_role(message.from_user.id) != "admin":
        await message.answer("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return

    logger.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –æ—Ç–∫—Ä—ã–ª –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –æ–ø—Ü–∏—é: ", reply_markup=keyboard_admin)


@admin_router.callback_query(F.data == "add_org")
async def add_organizer(callback: CallbackQuery, state: FSMContext):
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞")
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID")
    await state.set_state(AddOrganizer.waiting_for_user_id)
    await callback.answer()


@admin_router.message(AddOrganizer.waiting_for_user_id)
async def add_user_id(message: Message, state: FSMContext):
    user_id = message.text.strip()
    await state.update_data(user_id=user_id)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω user_id: {user_id} –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û")
    await state.set_state(AddOrganizer.waiting_for_full_name)


@admin_router.message(AddOrganizer.waiting_for_full_name)
async def add_full_name(message: Message, state: FSMContext):
    full_name = message.text.strip()
    await state.update_data(full_name=full_name)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ –§–ò–û: {full_name} –æ—Ç –∞–¥–º–∏–Ω–∞ {message.from_user.id}")

    data = await state.get_data()

    try:
        await add_organizer_(
            int(data["user_id"]),
            data["full_name"]
        )
        await message.answer("–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        logger.info(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä {data['user_id']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º {message.from_user.id}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞: {e}")
    await state.clear()


@admin_router.callback_query(F.data == "broadcast")
async def send_newsletter(callback: CallbackQuery):
    text = "–í—Å–µ—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –ø–æ–∫–∞–∂–∏—Ç–µ QR-–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ"
    users = await get_users()

    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞—á–∞–ª —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    for row in users:
        try:
            await bot.send_message(chat_id=row[0], text=text, reply_markup=keyboard_qr)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {row[0]}: {e}")

    await callback.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º {callback.from_user.id}")


@admin_router.callback_query(F.data == "get_qr")
async def generate_qr(call: CallbackQuery):
    user = call.from_user
    qr_data = f"https://t.me/{bot_username}?start={user.id}"
    qr_img = qrcode.make(qr_data)
    buf = BytesIO()
    qr_img.save(buf, format="PNG")
    buf.seek(0)

    file = BufferedInputFile(buf.read(), filename="user_qr.png")
    await call.message.answer_photo(photo=file, caption="–¢–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π QR-–∫–æ–¥")
    await call.answer()

    logger.info(f"QR-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")


@admin_router.callback_query(F.data == "count_users")
async def get_number_of_users(callback: CallbackQuery):
    num = await get_number_of_users_()
    await callback.message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {num}")
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {num}")
    await callback.answer()

@admin_router.callback_query(F.data == "delete_org")
async def show_organizers(callback: CallbackQuery):
    organizers = await get_organizers()

    kb = await get_kb_show_organozers(organizers)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ", reply_markup=kb)
    await callback.answer()
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ")

@admin_router.callback_query(F.data.startswith("org:"))
async def delete_organizer(callback: CallbackQuery):
    user_id = int(callback.data.split(":")[1])
    await delete_organizer_(user_id)

    await callback.message.answer(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —É–¥–∞–ª–µ–Ω", reply_markup=ReplyKeyboardRemove())
    await callback.answer()
    logger.info(f"–£–¥–∞–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä {user_id}")

@admin_router.callback_query(F.data == "hold_draw")
async def hold_draw(callback: CallbackQuery):
    await callback.message.answer("–†–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞—Ç...")
    users = await get_users_id_name()
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –Ω–∞—á–∞–ª —Ä–æ–∑—ã–≥—Ä—ã—à –¥–ª—è {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    if not users:
        await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        await callback.answer()
        logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞")
        return

    text1 = "üéâ–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω —Ä–æ–∑—ã–≥—Ä—ã—à, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥..."

    for user_id, _ in users:
        try:
            await bot.send_message(chat_id=user_id, text=text1)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await asyncio.sleep(5)
    winner_user_id, winner_user_name = await get_random_user(users)

    text2 = f"**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–æ–∑—ã–≥—Ä—ã—à–∞**\n üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_user_name or '–ê–Ω–æ–Ω–∏–º'} (ID: {winner_user_id})"

    for user_id, _ in users:
        try:
            await bot.send_message(chat_id=user_id, text=text2)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    await callback.message.answer("–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–µ–Ω.")
    await callback.answer()
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º {callback.from_user.id}")

@admin_router.callback_query(F.data == "synchronization")
async def synchronization_db_and_gs(callback: CallbackQuery):
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü")
    data_schedule = get_all_data(0)
    schedule = await get_schedule()

    if len(data_schedule) != len(schedule):
        if not schedule:
            logger.info("–¢–∞–±–ª–∏—Ü–∞ schedule –ø—É—Å—Ç–∞")
            for row in data_schedule:
                await add_schedule(
                    row['ID'],
                    row['–ù–∞–∑–≤–∞–Ω–∏–µ'],
                    row['–î–∞—Ç–∞'],
                    row['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞'],
                    row['–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è'],
                    row['–ú–µ—Å—Ç–æ'],
                    row['–û–ø–∏—Å–∞–Ω–∏–µ']
                    )
        else:
            logger.warning("–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ schedule –∏ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã Schedule. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É Schedule")
            await callback.message.answer("–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ schedule –∏ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã Schedule. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É Schedule")
            await callback.answer()
            return
    
    if data_schedule != schedule:
        await clear_table("schedule")
        for row in data_schedule:
            await add_schedule(
                row['ID'],
                row['–ù–∞–∑–≤–∞–Ω–∏–µ'],
                row['–î–∞—Ç–∞'],
                row['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞'],
                row['–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è'],
                row['–ú–µ—Å—Ç–æ'],
                row['–û–ø–∏—Å–∞–Ω–∏–µ']
                )
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã schedule")
    
    raffle = await get_raffle()
    data_raffle = get_all_data(1)
    await callback.answer()

    if len(data_raffle) != len(raffle):
        if not raffle:
            logger.info("–¢–∞–±–ª–∏—Ü–∞ raffle –ø—É—Å—Ç–∞")
            for row in data_raffle:
                await add_raffle(
                    row['ID'],
                    row['–ù–∞–∑–≤–∞–Ω–∏–µ'],
                    row['–î–∞—Ç–∞'],
                    row['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞'],
                    row['–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è'],
                    row['–ü—Ä–∏–∑—ã']
                    )
        else:
            logger.warning("–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ raffle –∏ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã Raffle. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É Raffle")
            await callback.message.answer("–û—à–∏–±–∫–∞ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ raffle –∏ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—ã Raffle. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±–Ω–æ–≤–∏—Ç—å –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É Raffle")
            await callback.answer()
            return
    
    if data_raffle != raffle:
        await clear_table("raffle")
        for row in data_raffle:
            await add_raffle(
                row['ID'],
                row['–ù–∞–∑–≤–∞–Ω–∏–µ'],
                row['–î–∞—Ç–∞'],
                row['–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞'],
                row['–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è'],
                row['–ü—Ä–∏–∑—ã']
                )
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã raffle")

    
    await callback.message.answer("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    await callback.answer()